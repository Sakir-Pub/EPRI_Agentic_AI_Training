"""
Hour 2 - Quarter 4: Advanced Reasoning & Business Intelligence
==============================================================

Learning Objectives:
- Build complete business intelligence automation systems
- Implement advanced decision-making and strategic reasoning
- Create end-to-end business process management
- Deploy enterprise-ready intelligent agent systems

Duration: 15 minutes
Technical Skills: Business process automation, strategic reasoning, decision frameworks
"""

import os
import json
import requests
from pathlib import Path
from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime, timedelta

# =============================================================================
# ADVANCED BUSINESS REASONING ENGINE
# =============================================================================

class BusinessReasoningEngine:
    """
    Advanced reasoning engine for complex business decision-making
    Implements strategic frameworks and business logic
    """
    
    def __init__(self):
        self.decision_frameworks = {
            "swot_analysis": {
                "components": ["strengths", "weaknesses", "opportunities", "threats"],
                "output": "strategic_recommendations"
            },
            "financial_analysis": {
                "components": ["revenue_trends", "cost_analysis", "profitability", "growth_metrics"],
                "output": "financial_recommendations"
            },
            "competitive_positioning": {
                "components": ["market_position", "competitor_analysis", "differentiation", "market_share"],
                "output": "competitive_strategy"
            },
            "risk_assessment": {
                "components": ["risk_identification", "impact_analysis", "probability_assessment", "mitigation_strategies"],
                "output": "risk_management_plan"
            }
        }
    
    def analyze_business_scenario(self, scenario_type, data_inputs):
        """
        Apply appropriate business reasoning framework to scenario
        """
        framework = self.decision_frameworks.get(scenario_type, self.decision_frameworks["swot_analysis"])
        
        analysis = {
            "framework_used": scenario_type,
            "components_analyzed": framework["components"],
            "data_sources": list(data_inputs.keys()),
            "reasoning_depth": "advanced",
            "strategic_implications": self._generate_strategic_implications(data_inputs),
            "recommended_actions": self._generate_action_items(scenario_type, data_inputs),
            "success_metrics": self._define_success_metrics(scenario_type)
        }
        
        return analysis
    
    def _generate_strategic_implications(self, data_inputs):
        """Generate strategic implications from data"""
        implications = []
        
        if "financial_data" in data_inputs:
            implications.append("Financial performance directly impacts strategic options")
        if "market_data" in data_inputs:
            implications.append("Market dynamics influence competitive positioning")
        if "competitor_data" in data_inputs:
            implications.append("Competitor actions require strategic response")
        
        return implications
    
    def _generate_action_items(self, scenario_type, data_inputs):
        """Generate specific action items based on analysis"""
        actions = {
            "immediate": [],
            "short_term": [],
            "long_term": []
        }
        
        if scenario_type == "financial_analysis":
            actions["immediate"].append("Review current quarter performance metrics")
            actions["short_term"].append("Optimize cost structure based on analysis")
            actions["long_term"].append("Develop sustainable growth strategy")
        elif scenario_type == "competitive_positioning":
            actions["immediate"].append("Assess competitive threats and opportunities")
            actions["short_term"].append("Adjust pricing and positioning strategy")
            actions["long_term"].append("Build sustainable competitive advantages")
        
        return actions
    
    def _define_success_metrics(self, scenario_type):
        """Define success metrics for tracking implementation"""
        metrics = {
            "financial_analysis": ["Revenue Growth %", "Profit Margin %", "ROI %"],
            "competitive_positioning": ["Market Share %", "Customer Acquisition Cost", "Brand Recognition"],
            "swot_analysis": ["Strategic Goal Achievement", "Risk Mitigation Success", "Opportunity Capture Rate"],
            "risk_assessment": ["Risk Reduction %", "Incident Prevention Rate", "Recovery Time"]
        }
        
        return metrics.get(scenario_type, ["Strategic Success Rate", "Implementation Progress", "ROI Achievement"])

# =============================================================================
# ENTERPRISE BUSINESS INTELLIGENCE AGENT
# =============================================================================

class EnterpriseBusinessAgent:
    """
    Complete enterprise business intelligence agent
    Combines all previous capabilities with advanced reasoning
    """
    
    def __init__(self):
        load_dotenv()
        self.client = OpenAI()
        self.reasoning_engine = BusinessReasoningEngine()
        
        # Import coordination capabilities from Q3
        from q3_multi_tool_coordination import CoordinatedFileProcessor, CoordinatedWebSearch, CoordinatedCalculator
        self.file_processor = CoordinatedFileProcessor()
        self.web_search = CoordinatedWebSearch()
        self.calculator = CoordinatedCalculator()
        
        # Enterprise-level system prompt
        self.system_prompt = """You are an enterprise-level business intelligence agent with advanced reasoning capabilities.

CORE CAPABILITIES:
1. FileAnalyzer(file_path) - Advanced document analysis with business insights
2. WebSearch(query) - Comprehensive market and competitive research
3. Calculator(expression) - Precise financial and business calculations
4. BusinessReasoning(scenario_type, data) - Strategic analysis and decision-making

BUSINESS INTELLIGENCE FRAMEWORKS:
- SWOT Analysis (Strengths, Weaknesses, Opportunities, Threats)
- Financial Analysis (Revenue, Costs, Profitability, Growth)
- Competitive Positioning (Market position, differentiation, strategy)
- Risk Assessment (Identification, impact, mitigation)

ENTERPRISE REASONING PROCESS:
1. SITUATION ANALYSIS: Gather and analyze all relevant data
2. STRATEGIC FRAMEWORK: Apply appropriate business reasoning framework
3. INSIGHT SYNTHESIS: Combine quantitative data with qualitative insights
4. DECISION RECOMMENDATIONS: Provide actionable strategic recommendations
5. IMPLEMENTATION ROADMAP: Define specific actions and success metrics

FORMAT FOR ENTERPRISE ANALYSIS:
üîç Situation Analysis: [Comprehensive data gathering and initial assessment]
üìã Strategic Framework: [Business framework applied and reasoning]
üí° Key Insights: [Critical findings and implications]
üéØ Strategic Recommendations: [Specific actionable recommendations]
üìà Implementation Roadmap: [Timeline, actions, and success metrics]

Final Answer: [Executive summary with strategic recommendations]

ENTERPRISE SCENARIOS YOU EXCEL AT:
- Complete business performance analysis and strategy development
- Market entry and expansion strategies with risk assessment
- Competitive intelligence and strategic positioning
- Financial planning and investment decision-making
- Crisis management and business continuity planning
- M&A analysis and due diligence support
"""
    
    def enterprise_analysis(self, business_scenario, max_steps=20):
        """
        Perform complete enterprise-level business analysis
        """
        print(f"\nüè¢ Enterprise Business Agent analyzing: {business_scenario}")
        print("üß† Initiating comprehensive business intelligence analysis...\n")
        
        # Determine business scenario type
        scenario_type = self._classify_business_scenario(business_scenario)
        print(f"üìä Business Scenario Type: {scenario_type}")
        print(f"üîß Applying {scenario_type} framework for strategic analysis\n")
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"Enterprise Business Scenario: {business_scenario}\n\nScenario Type: {scenario_type}\nProvide comprehensive business intelligence analysis using all available tools and frameworks."}
        ]
        
        step_count = 0
        business_data = {}
        tools_used = {"file": 0, "search": 0, "calc": 0, "reasoning": 0}
        
        while step_count < max_steps:
            step_count += 1
            print(f"üîÑ Enterprise Analysis Step {step_count}:")
            
            try:
                response = self.client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    temperature=0.1,
                    max_tokens=800
                )
                
                agent_response = response.choices[0].message.content
                print(agent_response)
                
                # Process enterprise-level tool usage
                tool_result = None
                
                # Enhanced file analysis for business intelligence
                if "FileAnalyzer(" in agent_response:
                    tools_used["file"] += 1
                    file_path = self._extract_file_path(agent_response)
                    if file_path:
                        result = self.file_processor.analyze_document(file_path)
                        tool_result = result["summary"]
                        business_data["internal_analysis"] = result
                        print(f"\nüìÑ Business Document Analysis: {tool_result}")
                
                # Market and competitive intelligence
                elif "WebSearch(" in agent_response:
                    tools_used["search"] += 1
                    query = self._extract_search_query(agent_response)
                    if query:
                        result = self.web_search.search(query)
                        tool_result = result["search_summary"]
                        business_data["market_intelligence"] = result
                        print(f"\nüåê Market Intelligence: {tool_result}")
                
                # Financial and business calculations
                elif "Calculator(" in agent_response:
                    tools_used["calc"] += 1
                    expression = self._extract_calculator_expression(agent_response)
                    if expression:
                        result = self.calculator.calculate(expression)
                        tool_result = result["formatted"]
                        business_data["financial_analysis"] = result
                        print(f"\nüî¢ Business Calculation: {tool_result}")
                
                # Advanced business reasoning
                elif "BusinessReasoning(" in agent_response:
                    tools_used["reasoning"] += 1
                    reasoning_result = self.reasoning_engine.analyze_business_scenario(scenario_type, business_data)
                    tool_result = f"Applied {scenario_type} framework with {len(reasoning_result['components_analyzed'])} components"
                    business_data["strategic_analysis"] = reasoning_result
                    print(f"\nüß† Strategic Business Reasoning: {tool_result}")
                    print(f"üìã Framework Components: {', '.join(reasoning_result['components_analyzed'])}")
                    print(f"üéØ Recommended Actions: {len(reasoning_result['recommended_actions']['immediate'])} immediate, {len(reasoning_result['recommended_actions']['short_term'])} short-term")
                
                # Update conversation
                messages.append({"role": "assistant", "content": agent_response})
                if tool_result:
                    messages.append({"role": "user", "content": f"Enterprise Tool Result: {tool_result}"})
                
                print("-" * 50)
                
                # Check for completion
                if "Final Answer:" in agent_response:
                    total_tools = sum(tools_used.values())
                    print(f"‚úÖ Enterprise analysis complete! Used {total_tools} tools:")
                    print(f"üìä Tool Breakdown: {tools_used['file']} file analysis, {tools_used['search']} market research, {tools_used['calc']} calculations, {tools_used['reasoning']} strategic reasoning")
                    
                    # Generate executive summary
                    executive_summary = self._generate_executive_summary(business_data, scenario_type)
                    return {
                        "analysis_result": self._extract_final_answer(agent_response),
                        "executive_summary": executive_summary,
                        "business_data": business_data,
                        "tools_used": tools_used,
                        "scenario_type": scenario_type
                    }
                
                # Continue analysis if not complete
                if not tool_result:
                    messages.append({
                        "role": "user",
                        "content": "Continue enterprise analysis or provide comprehensive Final Answer with strategic recommendations."
                    })
                
            except Exception as e:
                print(f"‚ùå Error in enterprise analysis step {step_count}: {e}")
                return f"Enterprise analysis error: {e}"
        
        print("‚ö†Ô∏è Reached maximum analysis steps")
        return "Enterprise analysis incomplete - reached step limit"
    
    def _classify_business_scenario(self, scenario):
        """Classify the type of business scenario for framework selection"""
        scenario_lower = scenario.lower()
        
        if any(word in scenario_lower for word in ["financial", "revenue", "profit", "budget", "cost"]):
            return "financial_analysis"
        elif any(word in scenario_lower for word in ["competitor", "competitive", "market share", "positioning"]):
            return "competitive_positioning"
        elif any(word in scenario_lower for word in ["risk", "threat", "crisis", "mitigation"]):
            return "risk_assessment"
        else:
            return "swot_analysis"
    
    def _generate_executive_summary(self, business_data, scenario_type):
        """Generate executive summary of analysis"""
        summary = {
            "analysis_type": scenario_type,
            "data_sources_analyzed": len(business_data),
            "key_findings": [],
            "strategic_priorities": [],
            "next_steps": []
        }
        
        if "internal_analysis" in business_data:
            summary["key_findings"].append("Internal document analysis reveals key performance indicators")
        if "market_intelligence" in business_data:
            summary["key_findings"].append("Market research provides competitive context")
        if "financial_analysis" in business_data:
            summary["key_findings"].append("Financial calculations quantify business impact")
        if "strategic_analysis" in business_data:
            summary["strategic_priorities"] = business_data["strategic_analysis"]["recommended_actions"]
        
        return summary
    
    def _extract_file_path(self, response):
        """Extract file path from response"""
        import re
        match = re.search(r'FileAnalyzer\((.*?)\)', response)
        return match.group(1).strip('"\'') if match else None
    
    def _extract_search_query(self, response):
        """Extract search query from response"""
        import re
        match = re.search(r'WebSearch\((.*?)\)', response)
        return match.group(1).strip('"\'') if match else None
    
    def _extract_calculator_expression(self, response):
        """Extract calculator expression from response"""
        import re
        match = re.search(r'Calculator\((.*?)\)', response)
        return match.group(1).strip('"\'') if match else None
    
    def _extract_final_answer(self, response):
        """Extract final answer from response"""
        lines = response.split('\n')
        for line in lines:
            if line.startswith("Final Answer:"):
                return line.replace("Final Answer:", "").strip()
        return "Enterprise analysis format not found"

# =============================================================================
# ENTERPRISE BUSINESS SCENARIOS
# =============================================================================

def create_enterprise_scenario_documents():
    """Create realistic enterprise business scenario documents"""
    
    enterprise_docs = {
        "strategic_plan_2025.txt": """TechSolutions Inc. - Strategic Plan 2025
==========================================

EXECUTIVE SUMMARY:
TechSolutions Inc. is positioned for aggressive growth in 2025, targeting 40% revenue increase through market expansion and product innovation. Key strategic initiatives focus on AI integration, European market entry, and strategic partnerships.

CURRENT POSITION (2024 Year-End):
- Annual Revenue: $34.2M (up 28% from 2023)
- Market Share: 12.3% in North American SaaS market
- Employee Count: 247 (growth of 45 employees)
- Customer Base: 2,847 active enterprise clients
- Cash Position: $8.7M (18 months runway)

STRATEGIC OBJECTIVES 2025:
1. Revenue Growth: Achieve $48M annual revenue (40% increase)
2. Market Expansion: Enter European market (target 15% of revenue)
3. Product Innovation: Launch AI-integrated platform by Q2
4. Operational Excellence: Improve gross margin to 78%
5. Talent Acquisition: Grow team to 320 employees

COMPETITIVE LANDSCAPE:
- Primary Competitors: SoftwareCorp (22% market share), DataSystems (18%)
- Emerging Threats: AI-native startups with $100M+ funding
- Market Dynamics: Increasing demand for AI integration, regulatory changes in EU

INVESTMENT REQUIREMENTS:
- Product Development: $12M (AI platform, European localization)
- Sales & Marketing: $8M (European expansion, digital marketing)
- Operations: $4M (infrastructure, compliance)
- Total Investment: $24M

RISK FACTORS:
- Competitive pressure from well-funded AI startups
- Economic downturn affecting enterprise software spending
- Regulatory compliance costs in European expansion
- Key talent retention in competitive market

SUCCESS METRICS:
- Monthly Recurring Revenue (MRR) growth: 3.5% monthly
- Customer Acquisition Cost (CAC): Reduce by 20%
- Net Revenue Retention: Maintain >110%
- European market penetration: 50 enterprise clients by year-end
""",
        
        "market_analysis_report.txt": """Enterprise Software Market Analysis Q4 2024
============================================

MARKET OVERVIEW:
The global enterprise software market reached $517B in 2024, with 12.8% YoY growth. SaaS segment dominates with 67% market share, driven by AI integration and cloud-first strategies.

KEY MARKET TRENDS:
1. AI Integration: 78% of enterprises planning AI adoption in 2025
2. Consolidation: 15% increase in platform consolidation preferences
3. Security Focus: 89% prioritize security in vendor selection
4. Cost Optimization: 34% reducing software spend due to economic uncertainty

COMPETITIVE INTELLIGENCE:
SoftwareCorp (Market Leader - 22% share):
- Recent: Acquired AI startup for $450M
- Strategy: Platform consolidation and enterprise focus
- Pricing: Premium positioning, 25% above market average
- Weakness: Slow innovation cycles, legacy architecture

DataSystems (Strong Challenger - 18% share):
- Recent: IPO raised $2.1B, massive marketing investment
- Strategy: Aggressive pricing, rapid feature development
- Pricing: 15% below market average to gain share
- Weakness: Limited enterprise features, support quality issues

Emerging AI Startups:
- 12 well-funded startups raised $2.8B combined
- Average funding: $233M per company
- Strategy: AI-native platforms targeting specific verticals
- Risk: Unproven at enterprise scale, limited track record

MARKET OPPORTUNITIES:
1. European Expansion: $47B market, growing 15% annually
2. Mid-Market Segment: Underserved, 23% growth potential
3. Industry Specialization: Vertical solutions command 35% premium
4. AI Integration Services: $12B market opportunity

THREATS AND CHALLENGES:
1. Economic Uncertainty: 67% of enterprises delaying new purchases
2. Increased Competition: 23% more vendors competing for deals
3. Price Pressure: Average deal sizes down 8% YoY
4. Regulatory Compliance: EU regulations adding 12% to costs

MARKET FORECAST 2025:
- Total Market: $582B (12.6% growth)
- SaaS Segment: $389B (13.2% growth)
- AI-Integrated Solutions: $89B (67% growth)
- European Market: $54B (15% growth)

STRATEGIC IMPLICATIONS:
- AI integration is no longer optional but essential for competitiveness
- European expansion offers significant growth but requires substantial investment
- Price competition intensifying, requiring clear value differentiation
- Market consolidation favors platforms over point solutions
""",
        
        "financial_performance_analysis.txt": """TechSolutions Inc. - Financial Performance Analysis
================================================

REVENUE ANALYSIS (Last 12 Months):
Q4 2024: $9.8M (+31% YoY, +12% QoQ)
Q3 2024: $8.7M (+28% YoY, +8% QoQ)
Q2 2024: $8.1M (+25% YoY, +14% QoQ)
Q1 2024: $7.1M (+22% YoY, +9% QoQ)
Annual 2024: $34.2M (+28% YoY)

REVENUE COMPOSITION:
- Subscription Revenue: $28.7M (84% of total)
- Professional Services: $3.2M (9% of total)
- License Revenue: $2.3M (7% of total)

PROFITABILITY METRICS:
- Gross Margin: 74.2% (industry average: 71%)
- Operating Margin: 18.5% (up from 12% in 2023)
- Net Margin: 14.2% ($4.9M net income)
- EBITDA: $6.8M (19.9% margin)

CASH FLOW ANALYSIS:
- Operating Cash Flow: $7.2M
- Free Cash Flow: $5.1M
- Cash Burn Rate: $483K/month (down from $670K)
- Current Cash Position: $8.7M

KEY PERFORMANCE INDICATORS:
- Monthly Recurring Revenue (MRR): $2.39M
- Annual Recurring Revenue (ARR): $28.7M
- Customer Acquisition Cost (CAC): $4,250
- Customer Lifetime Value (CLV): $47,300
- CLV/CAC Ratio: 11.1 (excellent)
- Net Revenue Retention: 112%
- Gross Revenue Retention: 94%
- Monthly Churn Rate: 2.1%

EXPENSE BREAKDOWN:
- Personnel: $16.8M (49% of revenue)
- Sales & Marketing: $8.2M (24% of revenue)
- Technology & Infrastructure: $3.1M (9% of revenue)
- General & Administrative: $2.8M (8% of revenue)
- Research & Development: $2.4M (7% of revenue)

BALANCE SHEET HIGHLIGHTS:
- Total Assets: $15.2M
- Current Assets: $11.8M
- Accounts Receivable: $2.9M (DSO: 31 days)
- Total Liabilities: $4.1M
- Stockholders' Equity: $11.1M
- Debt-to-Equity Ratio: 0.37

FINANCIAL RATIOS:
- Current Ratio: 4.2 (strong liquidity)
- Quick Ratio: 3.8 (excellent)
- Return on Assets (ROA): 32.2%
- Return on Equity (ROE): 44.1%
- Asset Turnover: 2.3x

BENCHMARK COMPARISON:
- Revenue Growth: 28% vs. Industry 15%
- Gross Margin: 74.2% vs. Industry 71%
- Operating Margin: 18.5% vs. Industry 12%
- CAC Payback Period: 8.2 months vs. Industry 14 months
- Net Revenue Retention: 112% vs. Industry 105%

FINANCIAL OUTLOOK & RISKS:
Strengths:
- Strong revenue growth and profitability
- Excellent unit economics (CLV/CAC ratio)
- Healthy cash position and cash generation
- Superior retention metrics

Concerns:
- Increasing customer acquisition costs (+18% YoY)
- Market saturation in core segments
- Need for significant investment in AI and expansion
- Dependency on subscription revenue model
"""
    }
    
    # Create enterprise documents directory
    docs_dir = Path("enterprise_documents")
    docs_dir.mkdir(exist_ok=True)
    
    # Write enterprise documents
    for filename, content in enterprise_docs.items():
        file_path = docs_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    print(f"üè¢ Created {len(enterprise_docs)} enterprise business documents in '{docs_dir}' directory")
    return list(enterprise_docs.keys())

# =============================================================================
# DEMONSTRATION FUNCTIONS
# =============================================================================

def demonstrate_enterprise_capabilities():
    """Show the complete transformation to enterprise intelligence"""
    print("üè¢ ENTERPRISE BUSINESS INTELLIGENCE TRANSFORMATION")
    print("=" * 70)
    
    transformation_levels = [
        {
            "level": "Hour 1: Foundation",
            "capabilities": "Basic reasoning, calculator, error handling",
            "business_value": "Simple calculations and logic",
            "use_case": "Individual task automation"
        },
        {
            "level": "Hour 2 Q1-Q2: Multi-Tool",
            "capabilities": "Web search, file processing, basic coordination",
            "business_value": "Research and document analysis",
            "use_case": "Business research and reporting"
        },
        {
            "level": "Hour 2 Q3: Coordination",
            "capabilities": "Intelligent workflow planning and tool sequencing",
            "business_value": "Optimized business analysis workflows",
            "use_case": "Comprehensive business intelligence"
        },
        {
            "level": "Hour 2 Q4: Enterprise Intelligence",
            "capabilities": "Strategic reasoning, decision frameworks, end-to-end automation",
            "business_value": "Complete business intelligence and strategic planning",
            "use_case": "Enterprise-level decision support and automation"
        }
    ]
    
    for level in transformation_levels:
        print(f"\nüéØ {level['level']}")
        print(f"   Capabilities: {level['capabilities']}")
        print(f"   Business Value: {level['business_value']}")
        print(f"   Use Case: {level['use_case']}")
    
    print("\nüöÄ Complete transformation: Calculator ‚Üí Enterprise Business Intelligence!")

def demonstrate_enterprise_scenarios():
    """Show enterprise-level business scenarios"""
    print("\nüíº ENTERPRISE BUSINESS SCENARIOS")
    print("=" * 70)
    
    scenarios = [
        {
            "scenario": "Strategic Planning & Market Entry",
            "description": "Complete market analysis, competitive intelligence, financial modeling for European expansion",
            "tools_used": "All four tools + strategic frameworks",
            "business_impact": "Data-driven expansion strategy with risk assessment"
        },
        {
            "scenario": "M&A Due Diligence",
            "description": "Financial analysis, market research, competitive positioning, risk assessment",
            "tools_used": "Document analysis + market research + financial modeling",
            "business_impact": "Comprehensive acquisition recommendation"
        },
        {
            "scenario": "Crisis Management & Recovery",
            "description": "Situation analysis, impact assessment, recovery planning, success metrics",
            "tools_used": "Multi-tool coordination + risk frameworks",
            "business_impact": "Rapid response and recovery strategy"
        },
        {
            "scenario": "Competitive Response Strategy",
            "description": "Competitor analysis, market intelligence, strategic positioning, action planning",
            "tools_used": "Intelligence gathering + strategic reasoning",
            "business_impact": "Proactive competitive strategy"
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüéØ Enterprise Scenario {i}: {scenario['scenario']}")
        print(f"   Description: {scenario['description']}")
        print(f"   Tools Used: {scenario['tools_used']}")
        print(f"   Business Impact: {scenario['business_impact']}")
    
    print("\nüè¢ Enterprise agents handle complete business processes end-to-end!")

# =============================================================================
# TESTING ENTERPRISE CAPABILITIES
# =============================================================================

def test_enterprise_intelligence():
    """Test enterprise business intelligence capabilities"""
    print("\nüß™ TESTING ENTERPRISE BUSINESS INTELLIGENCE")
    print("=" * 70)
    
    # Create enterprise documents
    enterprise_files = create_enterprise_scenario_documents()
    
    agent = EnterpriseBusinessAgent()
    
    enterprise_scenarios = [
        {
            "name": "Strategic Market Expansion Analysis",
            "scenario": "Analyze our strategic plan in 'enterprise_documents/strategic_plan_2025.txt', research current European SaaS market conditions, calculate investment ROI for expansion, and provide comprehensive strategic recommendations with risk assessment.",
            "expected_framework": "SWOT Analysis + Financial Analysis + Risk Assessment"
        },
        {
            "name": "Competitive Intelligence & Response Strategy",
            "scenario": "Review our market analysis in 'enterprise_documents/market_analysis_report.txt', research latest competitor moves and funding news, calculate competitive gaps, and develop strategic response plan with specific actions and timelines.",
            "expected_framework": "Competitive Positioning + Strategic Planning"
        }
    ]
    
    for i, test in enumerate(enterprise_scenarios, 1):
        print(f"\nüìã Enterprise Intelligence Test {i}: {test['name']}")
        print(f"üß† Expected Framework: {test['expected_framework']}")
        print(f"üè¢ Complex Scenario: {test['scenario'][:100]}...")
        
        result = agent.enterprise_analysis(test['scenario'])
        
        if isinstance(result, dict):
            print(f"üèÜ Enterprise Analysis Complete!")
            print(f"üìä Scenario Type: {result['scenario_type']}")
            print(f"üîß Tools Used: {result['tools_used']}")
            print(f"üìà Executive Summary: {result['executive_summary']['analysis_type']} with {result['executive_summary']['data_sources_analyzed']} data sources")
            print(f"üéØ Strategic Result: {result['analysis_result'][:150]}...")
        else:
            print(f"üèÜ Enterprise Result: {str(result)[:200]}...")
        
        print("\n" + "=" * 80)
        
        if i < len(enterprise_scenarios):
            input("Press Enter to continue to next enterprise test...")

# =============================================================================
# WORKSHOP CHALLENGE
# =============================================================================

def enterprise_intelligence_workshop():
    """Interactive workshop with enterprise business intelligence"""
    print("\nüéØ ENTERPRISE BUSINESS INTELLIGENCE WORKSHOP")
    print("=" * 70)
    
    agent = EnterpriseBusinessAgent()
    
    print("Test your enterprise agent with sophisticated business scenarios!")
    print("Enterprise Intelligence Challenges:")
    print("‚Ä¢ Complete strategic planning and market analysis")
    print("‚Ä¢ M&A due diligence and investment decisions")
    print("‚Ä¢ Crisis management and business continuity")
    print("‚Ä¢ Competitive intelligence and strategic response")
    print("‚Ä¢ End-to-end business process automation")
    print("\nEnterprise documents available in 'enterprise_documents/' directory")
    print("Type 'exit' to complete Hour 2.")
    
    while True:
        user_scenario = input("\nüí¨ Your enterprise business scenario: ")
        
        if user_scenario.lower() in ['exit', 'quit', 'done']:
            print("üéâ Outstanding! You've built enterprise-level business intelligence systems!")
            break
        
        if user_scenario.strip():
            result = agent.enterprise_analysis(user_scenario)
            if isinstance(result, dict):
                print(f"\nüéØ Enterprise Intelligence Result:")
                print(f"Scenario: {result['scenario_type']}")
                print(f"Analysis: {result['analysis_result']}")
            else:
                print(f"\nüéØ Enterprise Analysis: {result}")
        else:
            print("Please enter a complex enterprise business scenario.")

# =============================================================================
# MAIN WORKSHOP FUNCTION
# =============================================================================

def run_hour2_q4_workshop():
    """Main function for Hour 2 Q4 workshop - The Grand Finale!"""
    print("üöÄ HOUR 2 - QUARTER 4: ADVANCED REASONING & BUSINESS INTELLIGENCE")
    print("=" * 80)
    print("üèÜ THE GRAND FINALE - ENTERPRISE TRANSFORMATION COMPLETE!")
    print()
    
    # Step 1: Show complete transformation
    demonstrate_enterprise_capabilities()
    
    # Step 2: Show enterprise scenarios
    demonstrate_enterprise_scenarios()
    
    # Step 3: Test enterprise intelligence
    test_enterprise_intelligence()
    
    # Step 4: Interactive workshop
    enterprise_intelligence_workshop()
    
    # Step 5: Hour 2 completion and overall program summary
    print("\n" + "=" * 80)
    print("üéâ HOUR 2 COMPLETE - ENTERPRISE TRANSFORMATION ACHIEVED!")
    print("=" * 80)
    print("Enterprise Business Intelligence Achievements:")
    print("‚úÖ Advanced strategic reasoning and decision-making frameworks")
    print("‚úÖ Complete end-to-end business process automation")
    print("‚úÖ Enterprise-level scenario management and crisis response")
    print("‚úÖ Sophisticated competitive intelligence and market analysis")
    print("‚úÖ Integration of all capabilities into comprehensive business solutions")
    
    print("\nüèÜ Your Enterprise Agent Portfolio:")
    print("   ‚Üí Strategic planning and market expansion analysis")
    print("   ‚Üí M&A due diligence and investment decision support")
    print("   ‚Üí Competitive intelligence and strategic response systems")
    print("   ‚Üí Financial analysis and business performance optimization")
    print("   ‚Üí Crisis management and business continuity planning")
    print("   ‚Üí Complete business process automation capabilities")
    
    print("\nüìà COMPLETE 2-HOUR JOURNEY SUMMARY:")
    print("=" * 60)
    print("üïê Hour 1: Foundation Building")
    print("   Q1: Agentic AI concepts and ReAct pattern")
    print("   Q2: First reasoning agent with step-by-step thinking")
    print("   Q3: Enhanced error handling and self-correction")
    print("   Q4: Tool integration with calculator capabilities")
    print()
    print("üïë Hour 2: Advanced Multi-Tool Intelligence")
    print("   Q1: Web search integration for real-time information")
    print("   Q2: File processing for document intelligence")
    print("   Q3: Multi-tool coordination and workflow optimization")
    print("   Q4: Enterprise business intelligence and strategic reasoning")
    
    print("\nüåü TRANSFORMATION COMPLETE:")
    print("   From: Basic calculations and simple reasoning")
    print("   To: Enterprise-level business intelligence systems")
    print("   Capability Increase: 100x more sophisticated and valuable")
    
    print("\nüöÄ NEXT STEPS - CONTINUE YOUR JOURNEY:")
    print("‚úÖ Deploy your agents in real business scenarios")
    print("‚úÖ Customize agents for your specific department needs")
    print("‚úÖ Build multi-agent teams for complex projects (Hour 3-4 preview)")
    print("‚úÖ Integrate with your existing business systems")
    print("‚úÖ Scale across your organization for maximum impact")
    
    print("\nüéØ YOU ARE NOW EQUIPPED WITH:")
    print("   ‚Ä¢ Production-ready agentic AI development skills")
    print("   ‚Ä¢ Complete multi-tool integration capabilities")
    print("   ‚Ä¢ Enterprise business intelligence frameworks")
    print("   ‚Ä¢ Advanced reasoning and decision-making systems")
    print("   ‚Ä¢ Foundation for building AI-powered business solutions")
    
    print(f"\n‚è∞ Time: 15 minutes")
    print("üèÜ CONGRATULATIONS! You've mastered enterprise agentic AI!")
    print("üìç Ready for Hours 3-4: Multi-Agent Systems & Team Coordination!")

if __name__ == "__main__":
    # Run the complete Hour 2 Q4 workshop - The Grand Finale!
    run_hour2_q4_workshop()